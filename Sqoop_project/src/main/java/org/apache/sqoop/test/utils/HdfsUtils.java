/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.sqoop.test.utils;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.Arrays;

/**
 * Handy utilities to work with HDFS
 *
 * TODO: This module will require clean up to work on MiniCluster/Real cluster.
 */
public class HdfsUtils {

  private static final Logger LOG = Logger.getLogger(HdfsUtils.class);

  /**
   * Get list of mapreduce output files from given directory.
   *
   * @param directory Directory to be searched for files generated by MR
   * @return
   */
  public static String [] getOutputMapreduceFiles(String directory) {
    File dir = new File(directory);
    return dir.list(new FilenameFilter() {
      @Override
      public boolean accept(File dir, String name) {
        return name.startsWith("part-");
      }
    });
  }

  /**
   * Create HDFS file with given content.
   *
   * @param directory Directory where the file should be created
   * @param filename File name
   * @param lines Individual lines that should be written into the file
   * @throws IOException
   */
  public static void createFile(String directory, String filename, String ...lines) throws IOException {
    File outputFile = new File(directory, filename);
    FileUtils.writeLines(outputFile, Arrays.asList(lines));
  }

  private HdfsUtils() {
    // Instantiation is not allowed
  }
}
